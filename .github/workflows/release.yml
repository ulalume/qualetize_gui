name: Release

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release (e.g., v0.3.3)"
        required: true
        type: string

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always

jobs:
  build-and-release:
    strategy:
      matrix:
        include:
          - os: windows-latest
            target: x86_64-pc-windows-gnu
            use_bundle: false
            archive_ext: zip
            executable_ext: .exe
          - os: macos-latest
            target: x86_64-apple-darwin
            use_bundle: true
            archive_ext: tar.gz
            executable_ext: ""
          - os: macos-latest
            target: aarch64-apple-darwin
            use_bundle: true
            archive_ext: tar.gz
            executable_ext: ""
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            use_bundle: false
            archive_ext: tar.gz
            executable_ext: ""
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            use_bundle: false
            archive_ext: tar.gz
            executable_ext: ""

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Get version
        id: get_version
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Setup Windows GNU toolchain
        if: matrix.os == 'windows-latest'
        run: |
          rustup toolchain install stable-x86_64-pc-windows-gnu
          rustup default stable-x86_64-pc-windows-gnu

      - name: Setup MinGW (Windows)
        if: matrix.os == 'windows-latest'
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          update: true
          install: >-
            mingw-w64-x86_64-gcc
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-pkg-config

      - name: Configure MinGW environment (Windows)
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          echo "C:/msys64/mingw64/bin" >> $GITHUB_PATH
          echo "CC=gcc" >> $GITHUB_ENV
          echo "CXX=g++" >> $GITHUB_ENV
          echo "CARGO_TARGET_X86_64_PC_WINDOWS_GNU_LINKER=gcc" >> $GITHUB_ENV

      - name: Install cargo-bundle (macOS only)
        if: matrix.use_bundle
        run: cargo install cargo-bundle

      - name: Install cross-compilation dependencies (Linux)
        if: matrix.os == 'ubuntu-latest' && matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Configure cross-compilation (Linux aarch64)
        if: matrix.os == 'ubuntu-latest' && matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          mkdir -p ~/.cargo
          cat > ~/.cargo/config.toml << EOF
          [target.aarch64-unknown-linux-gnu]
          linker = "aarch64-linux-gnu-gcc"
          EOF

      - name: Cache cargo dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}

      - name: Build (bundle for macOS)
        if: matrix.use_bundle
        run: cargo bundle --release --target ${{ matrix.target }}

      - name: Build (regular for other platforms)
        if: ${{ !matrix.use_bundle }}
        run: cargo build --release --target ${{ matrix.target }}

      - name: Prepare release directory
        shell: bash
        run: |
          VERSION=${{ steps.get_version.outputs.version }}
          RELEASE_DIR="qualetize-gui-${VERSION}-${{ matrix.target }}"
          mkdir -p "${RELEASE_DIR}"

          if [ "${{ matrix.use_bundle }}" = "true" ]; then
            # For macOS bundle
            cp -r target/${{ matrix.target }}/release/bundle/osx/QualetizeGUI.app "${RELEASE_DIR}/"
          else
            # For other platforms
            if [ "${{ matrix.os }}" = "windows-latest" ]; then
              cp target/${{ matrix.target }}/release/QualetizeGUI${{ matrix.executable_ext }} "${RELEASE_DIR}/"
            else
              cp target/${{ matrix.target }}/release/QualetizeGUI "${RELEASE_DIR}/"
            fi
          fi

          echo "RELEASE_DIR=${RELEASE_DIR}" >> $GITHUB_ENV

      - name: Create archive (Windows)
        if: matrix.archive_ext == 'zip'
        shell: pwsh
        run: |
          $VERSION = "${{ steps.get_version.outputs.version }}"
          $ARCHIVE_NAME = "qualetize-gui-$VERSION-${{ matrix.target }}"
          Compress-Archive -Path $env:RELEASE_DIR -DestinationPath "$ARCHIVE_NAME.zip" -Force
          Write-Output "ARCHIVE_NAME=$ARCHIVE_NAME.zip" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Create archive (Unix)
        if: matrix.archive_ext == 'tar.gz'
        shell: bash
        run: |
          VERSION=${{ steps.get_version.outputs.version }}
          ARCHIVE_NAME="qualetize-gui-${VERSION}-${{ matrix.target }}"
          tar -czf "${ARCHIVE_NAME}.tar.gz" --exclude='.DS_Store' "${RELEASE_DIR}"
          echo "ARCHIVE_NAME=${ARCHIVE_NAME}.tar.gz" >> $GITHUB_ENV

      - name: Upload to Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          name: QualetizeGUI ${{ steps.get_version.outputs.version }}
          body: "Release ${{ steps.get_version.outputs.version }}"
          files: ${{ env.ARCHIVE_NAME }}
          draft: false
          prerelease: false
          make_latest: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
